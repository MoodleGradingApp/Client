{"version":3,"sources":["webpack:///$_lazy_route_resources|lazy|groupOptions: {}|namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/feedback.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","routes","AppRoutingModule","RouterModule","relativeLinkResolution","AppComponent","fb","feedbackService","showChart","averageScore","minScore","maxScoreStat","feedbackText","validFile","currentStudentIndex","isRowSelected","previousRow","selectedUser","studentRow","feedbackCount","feedbackStrings","header","dynamicArray","newDynamic","isCheckDisabled","feedback","deduction","selected","push","feedbackCreate","chartOptions","series","name","data","chart","foreColor","height","type","toolbar","show","title","text","align","yaxis","xaxis","offsetY","offsetX","categories","states","hover","filter","$event","console","log","csvRecords","undefined","confirm","clearStudents","file","srcElement","files","parseFile","subscribe","result","Array","parseCSV","fillChart","correctFile","maxScore","getFeedbackStrings","updateCheckboxState","updateSeries","row","trs","document","querySelectorAll","classList","remove","add","index","currentStudentName","fullName","maxGrade","i","feedbackBoolean","length","checkbox","getElementById","toString","checked","incriment","rowSelected","highlightRow","studentParser","addRow","splice","feedbackDelete","newValue","feedbackStringUpdate","feedbackDeductionUpdate","feedbackIndex","feedbackApply","feedbackUnapply","perfectGrade","clearGrade","feedbackRead","chartData","updateChartData","updateFeedbackCount","updateAverageStat","updateMinMaxStats","exportCSV","event","window","opener","location","reload","previousStudent","nextStudent","tempFunction","perfectScore","clearScore","fileChangeListener","AppModule","BrowserModule","ReactiveFormsModule","BrowserAnimationsModule","FormsModule","NgxCsvParserModule","NgApexchartsModule","FeedbackService","ngxCsvParser","students","fileName","of","response","parse","delimiter","createStudentsFromCsv","value","replace","currentDateTime","format","my_data_string","buildCSV","a","createElement","setAttribute","body","appendChild","blob","Blob","url","URL","createObjectURL","href","download","click","my_data","csv_file","line","feedbackString","createCSVFeedbackString","feedbackStringArray","n","res","join","newStudent","identifier","email","split","status","grade","gradeChange","submissionLastModified","onlineText","gradeLastModified","newFeedbackString","strings","ascending","points","newFeedback","gradeUpdate","newGrade","parseFloat","studentIndex","totalDeductions","Math","floor","toFixed","numGrade","round","avg","count","min","max","arrayGrades","apply","environment","production","enableProdMode","platformBrowser","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<!--\n-- Authors: Emily Costa and Michael Sisko\n--\n-- Citation(s):\n-- Autosizing Textarea: https://stackoverflow.com/questions/2803880/ by Martin Prestone\n--\n-->\n\n<head>\n    <title>Grading Assistant</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n</head>\n\n<div class=\"panel panel-default hide-outline\" id=\"master-panel\">\n    <p>Developed by: Emily Costa & Michael Sisko<br>Advised by: Victor Norman</p>\n    <h1 class=\"title\">\n        Grading Assistant\n        <span class=\"demo-text\"><a href=\"assets/demo_full.mp4\">See demo</a></span>\n    </h1>\n\n    <div class=\"row\">\n        <div class=\"col fixed-panel\" id=\"main-left-panel\">\n            <div class=\"panel panel-default hide-outline tight\">\n                <div class=\"panel panel-default\">\n                    <div class=\"panel panel-default hide-outline tight\" id=\"item-info\">\n                        <div id=\"assignment\">\n                            <label for=\"assignment\">Assignment Name:&nbsp;</label>\n                            <input\n                            class=\"input-box\"\n                            type=\"text\"\n                            id=\"title\"\n                            name=\"assignment\"\n                            placeholder=\"Ex. Homework 1\"\n                            data-testid=\"nameInput\"\n                            >\n                        </div>\n                        <div id=\"max-pts\">\n                            <label for=\"max-pts\">Max Points: {{maxScore}}</label>\n                        </div>\n                    </div>\n                    <div class=\"panel panel-default hide-outline tight btn-set\">\n                        <button type=\"button\" class=\"btn-primary-blue\" (click)=\"previousStudent()\" data-testid=\"prevStudentBtn\">Prev Student</button>\n                        <button type=\"button\" class=\"btn-primary-blue\" (click)=\"nextStudent()\" data-testid=\"nextStudentBtn\">Next Student</button>\n                        <button type=\"button\" class=\"btn-primary-blue\" (click)=\"showChart = !showChart\">{{ showChart ? \"Hide Stats\" : \"Show Stats\" }}</button>\n                    </div>\n                </div>\n                <div class=\"panel panel-default\">\n                    <div>\n                        <label for=\"Student\">Student Name: {{currentStudentName}}</label>\n                    </div>\n                    <div class=\"panel panel-default hide-outline tight btn-set\">\n                        <button type=\"button\" id=\"save-btn\" class=\"btn-primary-green\" (click)=\"tempFunction()\">Save Progress</button>\n                        <button type=\"button\" id=\"save-btn\" class=\"btn-primary-green\" (click)=\"perfectScore()\">Perfect Score</button>\n                        <button type=\"button\" id=\"save-btn\" class=\"btn-primary-green\" (click)=\"clearScore()\">Clear Score</button>\n                    </div>\n                    <br>\n                    <div class=\"feedback-table-container\">\n                        <table id=\"feedback-table\">\n                            <thead>\n                                <tr>\n                                    <th id=\"trash-header\">Delete</th>\n                                    <th>Feedback</th>\n                                    <th>Deduction</th>\n                                    <th>Apply</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let dynamic of dynamicArray; let i = index;\">\n                                    <td (click)=\"deleteRow(i)\">\n                                        <button\n                                            id=\"trash\"\n                                            data-testid=\"trashBtn\">\n                                            <i class=\"fa fa-trash\"></i>\n                                        </button>\n                                    </td>\n                                    <td>\n                                        <textarea\n                                            class=\"input-box\"\n                                            id=\"feedback\"\n                                            data-testid=\"feedbackInput\"\n                                            placeholder=\"Say something constructive...\"\n                                            [(ngModel)]=\"dynamicArray[i].feedback\"\n                                            (ngModelChange)=\"onFeedbackChange($event, i)\"\n                                            type=\"text\"\n                                            name=\"text\"\n                                            oninput='this.style.height = \"\";\n                                            this.style.height = this.scrollHeight + 3 + \"px\"'>\n                                        </textarea>\n                                    </td>\n                                    <td>\n                                        <input\n                                            class=\"input-box\"\n                                            id=\"deduction\"\n                                            data-testid=\"deductionInput\"\n                                            placeholder=\"0\"\n                                            [(ngModel)]=\"dynamicArray[i].deduction\"\n                                            (ngModelChange)=\"onDeductionChange($event, i)\"\n                                            type=\"number\"/>\n                                    </td>\n                                    <td>\n                                        <input\n                                            class=\"checkbox\"\n                                            id=\"checkbox{{i}}\"\n                                            data-testid=\"applyBtn\"\n                                            [(ngModel)]=\"dynamicArray[i].selected\"\n                                            (ngModelChange)=\"onSelectedChange($event, i)\"\n                                            type=\"checkbox\"\n                                            [attr.disabled]=\"isCheckDisabled ? true : null\"/>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <br>\n                    <button\n                    type=\"button\"\n                    id=\"addFeedbackBtn\"\n                    class=\"btn-primary-blue\"\n                    (click)=\"addRow()\"\n                    data-testid=\"addFeedbackBtn\"\n                    >Add Feedback</button>\n                    <br><br>\n                </div>\n            </div>\n            <div *ngIf=\"showChart\" class=\"grade-stats\">\n                <apx-chart\n                    [series]=\"chartOptions.series\"\n                    [chart]=\"chartOptions.chart\"\n                    [xaxis]=\"chartOptions.xaxis\"\n                    [yaxis]=\"chartOptions.yaxis\"\n                    [title]=\"chartOptions.title\"\n                ></apx-chart>\n                <div class=\"feedback-stats\">\n                    <h4>Feedback Count:</h4>\n                    <tbody>\n                        <tr *ngFor=\"let stats of feedbackCount;\">\n                            <td class=\"feedback-count\">{{stats.deduction}}:</td>\n                            <td class=\"feedback-string\">{{stats.feedback}}</td>\n                        </tr>\n                    </tbody>\n                </div>\n                <div class=\"class-stats\">\n                    <h4>Grade Stats:</h4>\n                    <tbody>\n                        <tr>\n                            <td class=\"average-score\">Average Score: {{averageScore}}</td>\n                        </tr>\n                        <tr>\n                            <td class=\"min-score\">Min Score: {{minScore}}</td>\n                        </tr>\n                        <tr>\n                            <td class=\"max-score\">Max Score: {{maxScoreStat}}</td>\n                        </tr>\n                    </tbody>\n                </div>\n            </div>\n        </div>\n    <div class=\"panel panel-default\" id=\"main-right-panel\">\n        <div class=\"csv-import-btn\">\n    <div class=\"panel panel-default tight hide-outline sticky outer-nowrap\">\n        <label\n            for=\"csvFileUpload\"\n            id=\"csvImportBtn\"\n            class=\"btn-primary-blue inner-nowrap\"\n        >Import Table</label>\n        <input\n            id=\"csvFileUpload\"\n            data-testid=\"importCSV\"\n            class=\"inner-nowrap sticky\"\n            type=\"file\"\n            #fileImportInput\n            name=\"File Upload\"\n            accept=\".csv\"\n            (change)=\"fileChangeListener($event)\"/>\n        <p *ngIf=\"!validFile\" class=\"file-warning inner-nowrap\">*Invalid CSV File</p>\n        <button\n            type=\"button\"\n            class=\"btn-primary-blue\"\n            id=\"exportBtn\"\n            (click)=\"exportCSV()\"\n        >Export Table</button>\n    </div>\n    <div class=\"panel panel-default tight hide-outline csv-result-table\">\n        <table class=\"csvTable sortable\">\n            <thead *ngIf=\"validFile == true\">\n                <tr>\n                    <th class=\"narrow csv-table-head\">#</th>\n                    <th class=\"narrow csv-table-head\">Name</th>\n                    <th class=\"narrow csv-table-head\">Email</th>\n                    <th class=\"narrow csv-table-head\">Timestamp</th>\n                    <th class=\"narrow csv-table-head\">Grade</th>\n                    <th class=\"wide csv-table-head\">Feedback</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"csv-data\" *ngFor=\"let i = index; let csvData of csvRecords;\"\n                    (click)=\"rowSelected(i)\" (click)=\"highlightRow(i)\"\n                >\n                    <td class=\"narrow\">{{i+1}}</td>\n                    <td class=\"narrow\">{{csvData.fullName}}</td>\n                    <td class=\"narrow\">{{csvData.email}}</td>\n                    <td class=\"narrow\">{{csvData.gradeLastModified}}</td>\n                    <td>{{csvData.grade}}</td>\n                    <td class=\"wide\" id=\"feedback-column\">{{feedbackStrings[i].strings.join('; ')}}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n","import { Component, HostListener } from '@angular/core';\nimport { FormBuilder, FormArray } from '@angular/forms';\nimport { ViewChild } from '@angular/core';\nimport { DynamicGrid } from './grid.model';\nimport { FeedbackService, FeedbackStrings, HomeworkFeedback, StudentInfo } from './feedback.service';\nimport {\n  ChartComponent,\n  ApexAxisChartSeries,\n  ApexChart,\n  ApexYAxis,\n  ApexXAxis,\n  ApexTitleSubtitle,\n  ApexDataLabels,\n  ApexPlotOptions,\n  ApexAnnotations,\n  ApexFill,\n  ApexStroke,\n  ApexGrid,\n  ApexStates,\n  ApexTooltip\n} from \"ng-apexcharts\";\n\nexport type ChartOptions = {\n  series: ApexAxisChartSeries;\n  chart: ApexChart;\n  yaxis: ApexYAxis;\n  xaxis: ApexXAxis;\n  title: ApexTitleSubtitle;\n  dataLabels: ApexDataLabels;\n  plotOptions: ApexPlotOptions;\n  annotations: ApexAnnotations;\n  fill: ApexFill;\n  stroke: ApexStroke;\n  grid: ApexGrid;\n  states: ApexStates;\n  tooltip: ApexTooltip;\n};\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\n\nexport class AppComponent {\n  public feedbackArray: FormArray;\n  public maxScore: string;\n  public feedbackInputText: string;\n  public showChart: boolean = false;\n  public averageScore: number = 0;\n  public minScore: number = 0;\n  public maxScoreStat: number = 0;\n\n  public feedbackText: string = '';\n\n  @ViewChild(\"chart\") chart: ChartComponent;\n  public chartOptions: Partial<ChartOptions>;\n\n  validFile: boolean = true;\n  currentStudentName: string;\n  currentStudentIndex: number = -1;\n  isRowSelected: boolean =  false;\n  previousRow: number = 2;\n  selectedUser: Array<string>[] = [];\n  studentRow: string[] = ['i', 'name', 'email', 'timestamp', 'grade', 'feedback'];\n\n  csvRecords: StudentInfo[];\n  feedback: HomeworkFeedback[];\n  feedbackCount: HomeworkFeedback[] = [];\n  feedbackStrings: FeedbackStrings[] = [];\n  header: boolean = false;\n\n  dynamicArray: Array<DynamicGrid> = [];\n  newDynamic: any = {};\n\n  //disable check boxes when no csv is imported\n  isCheckDisabled: boolean = true;\n\n  constructor(private fb: FormBuilder, private feedbackService: FeedbackService) {\n    this.newDynamic = {feedback: \"\", deduction:\"\", selected:\"\"};\n    this.dynamicArray.push(this.newDynamic);\n    this.feedbackService.feedbackCreate(null, null);\n\n    this.chartOptions = {\n      series: [\n        {\n          name: \"Grades\",\n          data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        }\n      ],\n      chart: {\n        foreColor: '#FFFFFF',\n        height: 400,\n        type: \"bar\",\n        toolbar: {\n          show: false\n        }\n      },\n      title: {\n        text: \"Grade Distribution\",\n        align: \"center\"\n      },\n      yaxis: {\n        title: {\n          text: \"No. of Students\"\n        }\n      },\n      xaxis: {\n        title: {\n          text: \"Grades Percentage\",\n          offsetY: -10,\n          offsetX: -20,\n        },\n        categories: [\"0-9\", \"10-19\",  \"20-29\",  \"30-39\",  \"40-49\",  \"50-59\",  \"60-69\",  \"70-79\", \"80-89\", \"90-100\"]\n      },\n      states: {\n        hover: {\n          filter: {\n            type: \"none\"\n          }\n        }\n      },\n    };\n  }\n\n  async fileChangeListener ($event: any) {\n    // clear current table\n    // display warning if student table is not empty\n    console.log(this.csvRecords);\n    console.log(this.csvRecords != undefined);\n    if (this.csvRecords != undefined) {\n      if (confirm(\"Are you sure you want to upload another CSV file? Your current work will be deleted!\")) {\n        // do nothing\n        console.log(\"User pressed Yes!\");\n      } else {\n        console.log(\"User pressed No!\");\n        return;\n      }\n    }\n\n    this.feedbackService.clearStudents();\n    // Select the file from the event\n    const file = $event.srcElement.files;\n    // wait for this to return\n    this.feedbackService.parseFile(file).subscribe(\n      result => {\n        if (result instanceof Array) {\n          this.feedbackService.parseCSV(result);\n          this.csvRecords = this.feedbackService.fillChart();\n          this.validFile = this.feedbackService.correctFile;\n          if (this.validFile) {\n            // select and highlight first student\n            this.currentStudentIndex = 0;\n            this.maxScore = this.feedbackService.maxScore;\n            // get feedback strings to display\n            this.feedbackStrings = this.feedbackService.getFeedbackStrings();\n            // enable checkboxes\n            this.isCheckDisabled = null;\n            // uncheck check boxes\n            this.updateCheckboxState();\n            // reset chart data\n            this.updateSeries();\n          } else {\n            this.maxScore = null;\n            console.log('Error Bad CSV');\n          }\n        } else {\n          // handle empty CSV\n          this.maxScore = null;\n          this.validFile = false;\n          this.csvRecords = [];\n          console.log('Error', result);\n        }\n      }\n    )\n  }\n\n  ngOnInit(): void {\n    // no-op\n  }\n\n  highlightRow(row:number) {\n    // add 'selected' class to tr element\n    var trs = document.querySelectorAll(\"tr.csv-data\");\n    if (this.isRowSelected === false) {\n      this.isRowSelected = true;\n    } else {\n      trs[this.previousRow].classList.remove(\"selected\");\n    }\n    trs[row].classList.add(\"selected\");\n    this.previousRow = row;\n  }\n\n  rowSelected(index:number) {\n    this.currentStudentIndex = index;\n    this.currentStudentName = this.csvRecords[index].fullName;\n    this.maxScore = this.csvRecords[0].maxGrade;\n    // code to check boxes off when on a certain student\n    this.updateCheckboxState();\n    // console.log(this.csvRecords);\n  }\n\n  updateCheckboxState() {\n    console.log(\"Update Check Boxes\");\n    for (var i = 0; i < this.csvRecords[this.currentStudentIndex].feedbackBoolean.length; i++) {\n      var checkbox = document.getElementById(\"checkbox\" + i.toString()) as HTMLInputElement;\n      if (this.csvRecords[this.currentStudentIndex].feedbackBoolean[i] === true) {\n        checkbox.checked = true;\n      } else {\n        checkbox.checked = false;\n      }\n    }\n  }\n\n  studentParser(incriment: number): void {\n    if (this.currentStudentIndex === 0 && incriment === -1 || this.currentStudentIndex === this.csvRecords.length-1 && incriment === 1) {\n      return\n    }\n    this.currentStudentIndex += incriment;\n    this.rowSelected(this.currentStudentIndex);\n    this.highlightRow(this.currentStudentIndex);\n    this.validFile = this.feedbackService.correctFile\n  }\n\n  nextStudent(): void {\n    this.studentParser(1);\n  }\n\n  previousStudent(): void {\n    if(this.currentStudentIndex > 0) {\n      this.studentParser(-1);\n    }\n  }\n\n  addRow(): void {\n    this.newDynamic = {feedback: \"\", deduction:\"\", selected:\"\"};\n    this.dynamicArray.push(this.newDynamic);\n    // create another feedback object\n    this.feedbackService.feedbackCreate(null, null)\n    console.log(this.dynamicArray);\n    return;\n  }\n\n  deleteRow(index: number) {\n    // add row so there will never be 0 rows\n    if (this.dynamicArray.length == 1) {\n      this.addRow();\n    }\n      this.dynamicArray.splice(index, 1);\n      this.feedbackService.feedbackDelete(index);\n\n    // update students' feedback string display\n    this.updateCheckboxState();\n    this.feedbackStrings = this.feedbackService.getFeedbackStrings();\n    this.updateSeries();\n  }\n\n  onFeedbackChange(newValue: string, index: number) {\n    this.feedbackService.feedbackStringUpdate(index, newValue);\n    // update students' feedback string display\n    this.feedbackStrings = this.feedbackService.getFeedbackStrings();\n    this.updateSeries();\n  }\n\n  onDeductionChange(newValue: number, index: number) {\n    this.feedbackService.feedbackDeductionUpdate(index, newValue);\n    this.feedbackStrings = this.feedbackService.getFeedbackStrings();\n    this.updateSeries();\n  }\n\n  onSelectedChange(newValue: boolean, feedbackIndex: number) {\n    if (this.currentStudentIndex == 0) {\n      this.highlightRow(this.currentStudentIndex);\n    }\n\n    if (this.currentStudentIndex >= 0) {\n      if (newValue === true) {\n        this.feedbackService.feedbackApply(feedbackIndex, this.currentStudentIndex);\n      } else {\n        this.feedbackService.feedbackUnapply(feedbackIndex, this.currentStudentIndex);\n      }\n      // update students' feedback string display\n      this.feedbackStrings = this.feedbackService.getFeedbackStrings();\n      this.updateSeries();\n    }\n  }\n\n  perfectScore() {\n    if (this.currentStudentIndex >= 0) {\n      this.feedbackService.perfectGrade(this.currentStudentIndex);\n    }\n    this.updateCheckboxState();\n    // update students' feedback string display\n    this.feedbackStrings = this.feedbackService.getFeedbackStrings();\n    this.updateSeries();\n  }\n\n  clearScore() {\n    if (this.currentStudentIndex >= 0) {\n      this.feedbackService.clearGrade(this.currentStudentIndex);\n    }\n    this.updateCheckboxState();\n    // update students' feedback string display\n    this.feedbackStrings = this.feedbackService.getFeedbackStrings();\n    console.log(this.feedbackCount);\n    this.updateSeries();\n  }\n\n  // To Do: Delete Later! Useful for Debugging!\n  tempFunction() {\n    this.feedback = this.feedbackService.feedbackRead();\n    console.log(this.feedback);\n    console.log(this.feedbackCount);\n    console.log(this.csvRecords);\n  }\n\n  updateSeries() {\n    let chartData: Array<number> = this.feedbackService.updateChartData();\n    // update data in chart\n    this.chartOptions.series = [{\n      data: chartData\n    }];\n    this.feedbackCount = this.feedbackService.updateFeedbackCount();\n    this.averageScore = this.feedbackService.updateAverageStat();\n    [this.minScore, this.maxScoreStat] = this.feedbackService.updateMinMaxStats();\n    console.log(\"update chart data!\")\n  }\n\n  exportCSV(): void {\n    this.feedbackService.exportCSV();\n    console.log(\"Export CSV!\")\n  }\n\n  // Warn user if reloading, closing, navigating away from page.\n  @HostListener('window:beforeunload', ['$event'])\n  unloadHandler(event: Event) {\n    window.opener.location.reload();\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgxCsvParserModule } from 'ngx-csv-parser';\nimport { NgApexchartsModule } from 'ng-apexcharts';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    NgxCsvParserModule,\n    NgApexchartsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { NgxCSVParserError, NgxCsvParser } from 'ngx-csv-parser';\nimport * as dayjs from 'dayjs';\n\nexport interface StudentInfo {\n  email: string,\n  feedbackBoolean: Array<boolean>,\n  fullName: string,\n  grade: string,\n  gradeChange: string,\n  identifier: string,\n  gradeLastModified: string,\n  submissionLastModified: string,\n  maxGrade: string,\n  onlineText: string,\n  status: string\n}\n\nexport interface HomeworkFeedback {\n  feedback: string,\n  deduction: number\n}\n\nexport interface FeedbackStrings {\n  strings: Array<string>\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeedbackService {\n\n  constructor(private ngxCsvParser: NgxCsvParser) { }\n\n  private students: StudentInfo[] = [];                    // store this in temp storage\n  private feedback: HomeworkFeedback[] = [];               // store this in temp storage\n  private feedbackCount: HomeworkFeedback[] = [];\n  private feedbackStrings: FeedbackStrings[] = [];\n\n  public correctFile: boolean;\n  public maxScore: string;\n\n  // csvRecords: Array<string>[] = [];\n\n  parseFile(fileName: any) : Observable<any[] | NgxCSVParserError | string> {\n    // Check for empty CSV file\n    if (fileName[0][\"size\"] > 3) {\n      this.correctFile = true;\n    } else {\n      this.correctFile = false;\n      this.clearStudents()\n      return of(\"File is empty\");\n    }\n\n    // reference: https://www.npmjs.com/package/ngx-csv-parser\n    // Parse the file you want to select for the operation along with the configuration\n    const response = this.ngxCsvParser.parse(fileName[0], { header: true, delimiter: ',' })\n    return response;\n  }\n\n  parseCSV(csvRecords: Array<any>): void {\n    // console.log('Parser Result', result);\n    // this.csvRecords = csvRecords;\n\n    // check headers if correct CSV file\n    if (\n      csvRecords[0] === undefined ||\n      csvRecords[0][\"Identifier\"] === undefined ||\n      csvRecords[0][\"Email address\"] === undefined ||\n      csvRecords[0][\"Feedback comments\"] === undefined ||\n      csvRecords[0][\"Full name\"] === undefined ||\n      csvRecords[0][\"Grade\"] === undefined ||\n      csvRecords[0][\"Grade can be changed\"] === undefined ||\n      csvRecords[0][\"Identifier\"] === undefined ||\n      csvRecords[0][\"Last modified (grade)\"] === undefined ||\n      csvRecords[0][\"Last modified (submission)\"] === undefined ||\n      csvRecords[0][\"Maximum Grade\"] === undefined ||\n      csvRecords[0][\"Online text\"] === undefined ||\n      csvRecords[0][\"Status\"] === undefined) {\n      console.log(\"Wrong CSV File!\");\n      this.correctFile = false;\n      this.clearStudents();\n    } else {\n      console.log(\"Correct CSV File!\");\n      this.correctFile = true;\n      this.createStudentsFromCsv(csvRecords);\n    }\n  }\n\n  // Make a download button\n  public exportCSV() {\n    // Get the assignment title\n    let title = (<HTMLInputElement>document.getElementById('title')).value;\n\n    // Remove forbidden characters from assignment title\n    title = title.replace(/[#<>^\\-~$%!&*,.;\\\\\"?'\\/{}:@+`|=\\[\\]]/g, '')\n    title = title.replace('=', '');\n\n    // If title is not provided assign default title 'assignment'\n    if (title === '') {\n      title = \"assignment\";\n    }\n\n    // Get current date and time\n    const currentDateTime = dayjs().format('_YYYY-MM-DD');\n\n    // Pass string into handle for data-table\n    const my_data_string = this.buildCSV(this.students);\n\n    // Create an href element in the DOM\n    let a = document.createElement(\"a\");\n    a.setAttribute('style', 'display:none;');\n    document.body.appendChild(a);\n\n    // Create object of type csv text file\n    const blob = new Blob([my_data_string], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n\n    // Pass URL to hyper-reference csv onclick\n    a.href = url;\n\n    // Apply custom name to file download\n    a.download = title + currentDateTime + '.csv';\n    a.click();\n  }\n\n  // This manually constructs our CSV file string\n  private buildCSV(students: Array<StudentInfo>): string {\n    // console.log(JSON.stringify(students, null, 2));\n    let my_data = students;\n    let csv_file = '';\n\n    // create header row\n    const row = 'Identifier,Full name,Email address,Status,Grade,Maximum Grade,Grade can be changed,Last modified (submission),Online text,Last modified (grade),Feedback comments'\n\n    // Add row and newline + carriage-return\n    csv_file += row + '\\r\\n';\n\n    // Build and add lines to csv_file\n    for (let i = 0; i < my_data.length; i++) {\n        let line = '';\n        for (let index in my_data[i]) {\n          if (line !== '') {\n            line += ','   // do comma-separation\n          }\n          if (index === 'gradeLastModified' || index === 'submissionLastModified') {\n            line += '\"' + my_data[i][index] + '\"'\n          } else if (index == 'feedbackBoolean') {\n            let feedbackString = this.createCSVFeedbackString(my_data[i][index])\n            // wrap each field in double quotes\n            line += '\"' + feedbackString + '\"'\n            // console.log(\"Return from function:\" + my_data[i][index])\n          }\n          else {\n            // console.log('mydata[i][index] = ', my_data[i][index])\n            line += my_data[i][index];\n          }\n\n        }\n        csv_file += line + '\\r\\n';\n    }\n\n    // End of file\n    return csv_file;\n  }\n\n  private createCSVFeedbackString(feedback: Array<boolean>): string {\n    let feedbackStringArray = []\n    for (let n = 0; n < this.feedback.length; n++) {\n      if (feedback[n]) {\n        // if the feedback string has a double quote in it, add an extra one.\n        const res = this.feedback[n].feedback.replace(/\"/g, '\"\"');\n        feedbackStringArray.push(\"-\" + this.feedback[n].deduction + \": \" + res)\n      }\n    }\n    const feedbackString = feedbackStringArray.join('; ')\n    return feedbackString;\n  }\n\n  private createStudentsFromCsv(csvRecords: Array<{}>) {\n\n    // console.log(JSON.stringify(csvRecords, null, 2));\n\n    // put csv-parser results into newStudent[]\n    for (let i = 0; i < csvRecords.length; i++) {\n      // initialize each student object\n      const newStudent: StudentInfo = {\n        identifier: csvRecords[i][\"Identifier\"],\n        fullName: csvRecords[i][\"Full name\"],\n        email: csvRecords[i][\"Email address\"].split(\"@\", 1)[0],  // only the username part\n        status: csvRecords[i][\"Status\"],\n        grade: csvRecords[i][\"Grade\"],\n        maxGrade: csvRecords[i][\"Maximum Grade\"],\n        gradeChange: csvRecords[i][\"Grade can be changed\"],\n        submissionLastModified: csvRecords[i][\"Last modified (submission)\"],\n        onlineText: csvRecords[i][\"Online text\"],\n        gradeLastModified: csvRecords[i][\"Last modified (grade)\"],\n        feedbackBoolean: [false]\n      }\n      this.students.push(newStudent);\n      // initialize each students' feedback strings\n      // vtn2 -- just initialized to a list of emtpy objects... then computed below in\n      // getFeedbackStrings().  Probably don't need this at all.\n      const newFeedbackString: FeedbackStrings = {\n        strings: []\n      }\n      this.feedbackStrings.push(newFeedbackString);\n    }\n\n    // set assignment max score\n    this.maxScore = this.students[0].maxGrade;\n  }\n\n  clearStudents() {\n    this.students = [];\n  }\n\n  sortStudentsOnEmail(ascending: boolean) {\n\n\n  }\n\n\n  fillChart(): StudentInfo[] {\n    return this.students;\n  }\n\n  feedbackCreate(feedbackString: string, points: number): void {\n    const newFeedback: HomeworkFeedback = {\n      feedback: feedbackString,\n      deduction: points\n    }\n    this.feedback.push(newFeedback);\n\n    // add this feedback to the student feedback array as false\n    for (let i = 0; i < this.students.length; i++) {\n      this.students[i].feedbackBoolean.push(false);\n    }\n  }\n\n  feedbackRead(): HomeworkFeedback[] {\n    return this.feedback;\n  }\n\n  feedbackStringUpdate(index: number, feedbackString: string): void {\n    // update values in feedback array\n    this.feedback[index].feedback = feedbackString;\n  }\n\n  feedbackDeductionUpdate(index: number, points: number): void {\n    this.feedback[index].deduction = points;\n    for (let i = 0; i < this.students.length; i++) {\n      if (this.students[i].feedbackBoolean[index]) {\n        this.gradeUpdate(i);\n      }\n    }\n  }\n\n  feedbackDelete(index: number): void {\n    // let response = window.confirm(\"Deleting this option will remove it universally. Are you sure?\");\n    // if (response) {\n    // delete feedback in students' boolean feedback arrays\n    for (let i = 0; i < this.students.length; i++) {\n      if (this.students[i].feedbackBoolean[index]) {\n        // add deduction value to student grade before delete\n        const newGrade = parseFloat(this.students[i].grade) + this.feedback[index].deduction\n        this.students[i].grade = newGrade.toString();\n      }\n      this.students[i].feedbackBoolean.splice(index,1);\n    }\n\n    // remove 1 element at index\n    this.feedback.splice(index,1);\n    // }\n  }\n\n  feedbackApply(feedbackIndex: number, studentIndex: number): void {\n    this.students[studentIndex].feedbackBoolean[feedbackIndex] = true;\n    // update grade\n    this.gradeUpdate(studentIndex);\n  }\n\n  feedbackUnapply(feedbackIndex: number, studentIndex: number): void {\n    this.students[studentIndex].feedbackBoolean[feedbackIndex] = false;\n    this.gradeUpdate(studentIndex);\n  }\n\n  gradeUpdate(studentIndex: number): void {\n    let totalDeductions = 0;\n    for (let n = 0; n < this.feedback.length; n++) {\n      if (this.students[studentIndex].feedbackBoolean[n]) {\n        totalDeductions = totalDeductions + this.feedback[n].deduction;\n      }\n    }\n\n    let newGrade = parseFloat(this.maxScore) - totalDeductions;\n    // if score is not an int round to 1 decimal place\n    const result = (newGrade - Math.floor(newGrade)) !== 0;\n    if (result) {\n      newGrade = parseFloat(newGrade.toFixed(1));\n    }\n\n    this.students[studentIndex].grade = newGrade.toString();\n  }\n\n  perfectGrade(studentIndex: number): void {\n    this.students[studentIndex].grade = this.maxScore;\n    // set all boolean feedback to false\n    for (let n = 0; n < this.feedback.length; n++) {\n      this.students[studentIndex].feedbackBoolean[n] = false;\n    }\n  }\n\n  clearGrade(studentIndex:number): void {\n    this.students[studentIndex].grade = \"\";\n    // set all boolean feedback to false\n    for (let n = 0; n < this.feedback.length; n++) {\n      this.students[studentIndex].feedbackBoolean[n] = false;\n    }\n  }\n\n  getFeedbackStrings(): FeedbackStrings[] {\n    // todo: csvRecrods.length should be students.length, imo.\n    for (let i = 0; i < this.students.length; i++) {\n      // this.feedbackStrings[i].strings.splice(0, this.feedbackStrings[i].strings.length);\n      this.feedbackStrings[i].strings = [];\n      for (let n = 0; n < this.feedback.length; n++) {\n        if (this.students[i].feedbackBoolean[n]) {\n          this.feedbackStrings[i].strings.push(\"-\" + this.feedback[n].deduction + \": \" + this.feedback[n].feedback);\n        }\n      }\n    }\n    return this.feedbackStrings;\n  }\n\n  updateChartData(): Array<number> {\n    let chartData: Array<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    // loop through each student to put data into histogram\n    for (let i = 0; i < this.students.length; i++) {\n      if (this.students[i].grade != \"\") {\n        const numGrade: number = Math.round((parseFloat(this.students[i].grade) / parseFloat(this.maxScore)) * 100);\n        // console.log(parseFloat(this.maxScore));\n        // console.log(numGrade);\n        // make sure in range 0 to 100\n        if (numGrade >= 0 && numGrade <= 100) {\n          if (numGrade <= 9) {\n            // 0 to 9\n            chartData[0] += 1;\n          } else if (numGrade <= 19) {\n            // 10 to 19\n            chartData[1] += 1;\n          } else if (numGrade <= 29) {\n            // 20 to 29\n            chartData[2] += 1;\n          } else if (numGrade <= 39) {\n            // 30 to 39\n            chartData[3] += 1;\n          } else if (numGrade <= 49) {\n            // 40 to 49\n            chartData[4] += 1;\n          } else if (numGrade <= 59) {\n            // 50 to 59\n            chartData[5] += 1;\n          } else if (numGrade <= 69) {\n            // 60 to 69\n            chartData[6] += 1;\n          } else if (numGrade <= 79) {\n            // 70 to 79\n            chartData[7] += 1;\n          } else if (numGrade <= 89) {\n            // 80 to 89\n            chartData[8] += 1;\n          } else if (numGrade <= 100) {\n            // 90 to 100\n            chartData[9] += 1;\n          }\n        }\n      }\n    }\n    return chartData;\n  }\n\n  updateFeedbackCount(): Array<HomeworkFeedback> {\n    // count the number of times each feedback is applied\n    // the deduction value is the count vlaue\n\n    this.feedbackCount = []\n\n    for (let n = 0; n < this.feedback.length; n++) {\n      if (this.feedback[n].feedback != \"\") {\n        const newFeedback: HomeworkFeedback = {\n          feedback: this.feedback[n].feedback,\n          deduction: 0\n        }\n        this.feedbackCount.push(newFeedback);\n      }\n      for (let i = 0; i < this.students.length; i++) {\n        if (this.students[i].feedbackBoolean[n]) {\n          this.feedbackCount[n].deduction += 1;\n        }\n      }\n    }\n    return this.feedbackCount;\n  }\n\n  updateAverageStat(): number {\n    let avg: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < this.students.length; i++) {\n      if (this.students[i].grade != \"\") {\n        const numGrade: number = Math.round((parseFloat(this.students[i].grade) / parseFloat(this.maxScore)) * 100);\n        avg += numGrade;\n        count += 1;\n      }\n    }\n    return (avg / count)\n  }\n\n  updateMinMaxStats(): Array<number> {\n    let min: number = 0;\n    let max: number = 0;\n    let arrayGrades: Array<number> =[];\n\n    for (let i = 0; i < this.students.length; i++) {\n      if (this.students[i].grade != \"\") {\n        const numGrade: number = Math.round((parseFloat(this.students[i].grade) / parseFloat(this.maxScore)) * 100);\n        arrayGrades.push(numGrade);\n      }\n    }\n    min = Math.min.apply(Math, arrayGrades)\n    max = Math.max.apply(Math, arrayGrades)\n    return [min, max]\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}